--CLEANING UP DATA
--Clean customer_orders Table to remove NULL
SELECT order_id, customer_id, pizza_id, 
  CASE 
    WHEN exclusions IS null OR exclusions LIKE 'null' THEN ''
    ELSE exclusions
    END AS exclusions,
  CASE 
    WHEN extras IS NULL or extras LIKE 'null' THEN ''
    ELSE extras 
    END AS extras, 
  order_time
INTO t_customer_orders
FROM pizza_runner.customer_orders;

--Clean runner_orders Table to remove null
SELECT order_id, runner_id,
	CASE
      WHEN pickup_time LIKE 'null' THEN null
      ELSE pickup_time
      END AS pickup_time,
    CASE
      WHEN distance LIKE 'null' THEN '0'
      WHEN distance LIKE '%km%' THEN TRIM(distance, 'km')
      ELSE distance
      END AS distance,
    CASE
      WHEN duration LIKE 'null' THEN '0'
      WHEN duration LIKE '%minutes%' THEN TRIM(duration, 'minutes')
      WHEN duration LIKE '%minute%' THEN TRIM(duration, 'minute')
      WHEN duration LIKE '%mins%' THEN TRIM (duration, 'mins')
      ELSE duration
      END AS duration,
    CASE
      WHEN cancellation IS null OR cancellation LIKE 'null' THEN ''
      ELSE cancellation
      END AS cancellation
INTO t_runner_orders
FROM pizza_runner.runner_orders;

ALTER TABLE t_runner_orders
ALTER COLUMN pickup_time TYPE TIMESTAMP USING pickup_time::timestamp,
ALTER COLUMN distance TYPE FLOAT USING distance::float, 
ALTER COLUMN duration TYPE INT USING duration::int;

--A. PIZZA METRICS
--1. How many pizzas were ordered?
SELECT COUNT(*)
FROM t_customer_orders;

--2. How many unique customer orderers were made?
SELECT COUNT(DISTINCT order_id)
FROM t_customer_orders;

--3. How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(*)
FROM t_runner_orders
WHERE cancellation = ''
GROUP BY runner_id;

--4. How many of each type of pizza was delivered?
SELECT pizza_runner.pizza_names.pizza_name, COUNT(*) AS pizza_count
FROM t_customer_orders
JOIN t_runner_orders ON t_customer_orders.order_id = t_runner_orders.order_id
JOIN pizza_runner.pizza_names ON t_customer_orders.pizza_id = pizza_runner.pizza_names.pizza_id
WHERE cancellation =''
GROUP BY t_customer_orders.pizza_id, pizza_runner.pizza_names.pizza_name
ORDER BY t_customer_orders.pizza_id;

--5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT customer_id, pizza_name, COUNT(*) AS order_count
FROM t_customer_orders
JOIN t_runner_orders ON t_customer_orders.order_id = t_runner_orders.order_id
JOIN pizza_runner.pizza_names ON t_customer_orders.pizza_id = pizza_runner.pizza_names.pizza_id
GROUP BY customer_id, pizza_name
ORDER BY customer_id, pizza_name;

--6. What was the maximum number of pizzas delivered in a single order?
WITH pizza_counts AS (
  SELECT t_customer_orders.order_id, COUNT(*) AS pizza_count
  FROM t_customer_orders
  JOIN t_runner_orders ON t_customer_orders.order_id = t_runner_orders.order_id
  WHERE cancellation = ''
  GROUP BY t_customer_orders.order_id
  ORDER BY t_customer_orders.order_id)
SELECT MAX(pizza_count)
FROM pizza_counts;

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT customer_id,
	SUM(CASE
    	WHEN exclusions != '' OR extras != '' THEN 1
        ELSE 0
        END) AS at_least_1_change,
	SUM(CASE
    	WHEN exclusions = '' AND extras = '' THEN 1
        ELSE 0
        END) AS no_changes
FROM t_customer_orders
JOIN t_runner_orders ON t_customer_orders.order_id = t_runner_orders.order_id
WHERE cancellation = ''
GROUP BY customer_id;

--8. How many pizzas were delivered that had both exclusions and extras?
SELECT COUNT(*)
FROM t_customer_orders
JOIN t_runner_orders ON t_customer_orders.order_id = t_runner_orders.order_id
WHERE cancellation = '' AND exclusions != '' AND extras != '';

--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT EXTRACT(hour FROM order_time) AS order_hour, COUNT(*)
FROM t_customer_orders
GROUP BY order_hour
ORDER BY order_hour;

--10. What was the volume of orders for each day of the week?
SELECT TO_CHAR(order_time, 'Day') AS order_dow, COUNT(*)
FROM t_customer_orders
GROUP BY order_dow;

--OR

SELECT EXTRACT(dow FROM order_time) AS order_dow, COUNT(*)
FROM t_customer_orders
GROUP BY order_dow
ORDER BY order_dow;
