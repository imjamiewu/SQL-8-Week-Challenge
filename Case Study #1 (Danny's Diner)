/* --------------------
   Case Study Questions
   --------------------*/
   
-- 1. What is the total amount each customer spent at the restaurant?
SELECT
	customer_id,
    SUM(price) AS total_amount
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
GROUP BY customer_id
ORDER BY customer_id ASC;

-- 2. How many days has each customer visited the restaurant?
SELECT
	customer_id,
    COUNT(DISTINCT order_date) AS days
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
GROUP BY customer_id
ORDER BY customer_id ASC;

-- 3. What was the first item from the menu purchased by each customer?
WITH added_row AS (
  SELECT
  *,
  ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date ASC) AS row_number
  FROM dannys_diner.sales
)
SELECT
	customer_id,
    product_name
FROM added_row
LEFT JOIN dannys_diner.menu
ON added_row.product_id = dannys_diner.menu.product_id
WHERE row_number = 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT
	product_name,
	COUNT(dannys_diner.menu.product_id) AS times_purchased
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
GROUP BY product_name
ORDER BY times_purchased DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?
WITH added_dense_rank AS (
  SELECT
    customer_id,
    product_name,
  	DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY COUNT(dannys_diner.menu.product_id) DESC) AS rank
  FROM dannys_diner.sales
  LEFT JOIN dannys_diner.menu
  ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
  GROUP BY customer_id, menu.product_name
  ORDER BY customer_id ASC
)
SELECT
	customer_id,
    product_name
FROM added_dense_rank
WHERE rank = 1;

-- 6. Which item was purchased first by the customer after they became a member?
WITH added_dense_rank AS (
  SELECT
	sales.customer_id,
    menu.product_name,
    order_date,
    join_date,
  	DENSE_RANK() OVER(PARTITION BY sales.customer_id ORDER BY order_date) AS rank
	FROM dannys_diner.sales
    LEFT JOIN dannys_diner.menu
    ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
	LEFT JOIN dannys_diner.members
	ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
	WHERE join_date <= order_date
    ORDER BY customer_id, order_date
)
SELECT
	customer_id,
	product_name
FROM added_dense_rank
where rank = 1;

-- 7. Which item was purchased just before the customer became a member?
WITH added_dense_rank AS (
  SELECT
	sales.customer_id,
    menu.product_name,
    order_date,
    join_date,
  	DENSE_RANK() OVER(PARTITION BY sales.customer_id ORDER BY order_date DESC) AS rank
	FROM dannys_diner.sales
    LEFT JOIN dannys_diner.menu
    ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
	LEFT JOIN dannys_diner.members
	ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
	WHERE join_date > order_date
    ORDER BY customer_id, order_date
)
SELECT
	customer_id,
	product_name
FROM added_dense_rank
where rank = 1;

-- 8. What is the total items and amount spent for each member before they became a member?
SELECT
	sales.customer_id,
    count(sales.product_id) AS total_items,
    SUM(price) AS total_amount
FROM dannys_diner.sales
LEFT JOIN dannys_diner.menu
ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
LEFT JOIN dannys_diner.members
ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
WHERE join_date > order_date
GROUP BY sales.customer_id
ORDER BY sales.customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH total_points AS (
  SELECT
      sales.customer_id,
  CASE
      WHEN sales.product_id = 1 THEN SUM(price*20)
      ELSE SUM(price*10)
  END AS points
  FROM dannys_diner.sales
  LEFT JOIN dannys_diner.menu
  ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
  GROUP BY sales.customer_id, sales.product_id
)
SELECT
	customer_id,
    SUM(points)
FROM total_points
GROUP BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH total_points AS (
  SELECT
      sales.customer_id,
  CASE
      WHEN order_date BETWEEN join_date AND join_date + INTERVAL '6 day' THEN SUM(price*20)
      ELSE SUM(price*10)
  END AS points
  FROM dannys_diner.sales
  JOIN dannys_diner.menu
  ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
  JOIN dannys_diner.members
  ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
  GROUP BY sales.customer_id, order_date, join_date
)
SELECT
	customer_id,
    SUM(points)
FROM total_points
GROUP BY customer_id
ORDER BY customer_id;

/* --------------------
   Bonus Questions
   --------------------*/
   
-- JOIN ALL THE THINGS - Recreate the following table output using the available data.
SELECT
	sales.customer_id,
    sales.order_date,
    menu.product_name,
    menu.price,
    CASE
      WHEN order_date >= join_date THEN 'Y'
      ELSE 'N'
    END AS member
FROM dannys_diner.sales
JOIN dannys_diner.menu
ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
LEFT JOIN dannys_diner.members
ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
ORDER BY customer_id, order_date;

-- RANK ALL THE THINGS - Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.
WITH added_member AS (
  SELECT
	sales.customer_id,
    sales.order_date,
    menu.product_name,
    menu.price,
    CASE
      WHEN order_date >= join_date THEN 'Y'
      ELSE 'N'
    END AS member
  FROM dannys_diner.sales
  JOIN dannys_diner.menu
  ON dannys_diner.sales.product_id = dannys_diner.menu.product_id
  LEFT JOIN dannys_diner.members
  ON dannys_diner.sales.customer_id = dannys_diner.members.customer_id
  ORDER BY customer_id, order_date
)
SELECT
	customer_id,
    order_date,
    product_name,
    price,
	member,
    CASE
    	WHEN member = 'N' THEN null
        WHEN member = 'Y' THEN DENSERANK() OVER(PARTITION BY sales.customer_id ORDER BY COUNT(product_name) DESC) AS ranking
    END AS ranking
FROM added_member;
